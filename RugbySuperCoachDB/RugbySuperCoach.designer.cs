#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RugbySuperCoachDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RugbySuperCoach")]
	public partial class RugbySuperCoachDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPlayerStat(PlayerStat instance);
    partial void UpdatePlayerStat(PlayerStat instance);
    partial void DeletePlayerStat(PlayerStat instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public RugbySuperCoachDataContext() : 
				base(global::RugbySuperCoachDB.Properties.Settings.Default.RugbySuperCoachConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RugbySuperCoachDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RugbySuperCoachDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RugbySuperCoachDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RugbySuperCoachDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<PlayerStat> PlayerStats
		{
			get
			{
				return this.GetTable<PlayerStat>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<AveragePlayerStats> AveragePlayerStats
		{
			get
			{
				return this.GetTable<AveragePlayerStats>();
			}
		}
		
		public System.Data.Linq.Table<DreamSquadOnPoints> DreamSquadOnPoints
		{
			get
			{
				return this.GetTable<DreamSquadOnPoints>();
			}
		}
		
		public System.Data.Linq.Table<DreamSquadOnValueForMoney> DreamSquadOnValueForMoneys
		{
			get
			{
				return this.GetTable<DreamSquadOnValueForMoney>();
			}
		}
		
		public System.Data.Linq.Table<DreamTeamOnPoints> DreamTeamOnPoints
		{
			get
			{
				return this.GetTable<DreamTeamOnPoints>();
			}
		}
		
		public System.Data.Linq.Table<DreamTeamOnValueForMoney> DreamTeamOnValueForMoneys
		{
			get
			{
				return this.GetTable<DreamTeamOnValueForMoney>();
			}
		}
		
		public System.Data.Linq.Table<PlayerStats> PlayerStats1
		{
			get
			{
				return this.GetTable<PlayerStats>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DreamTeamBasedOnPoints", IsComposable=true)]
		public IQueryable<DreamTeamBasedOnPointsResult> DreamTeamBasedOnPoints([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> round)
		{
			return this.CreateMethodCallQuery<DreamTeamBasedOnPointsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), round);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DreamTeamBasedOnValueForMoney", IsComposable=true)]
		public IQueryable<DreamTeamBasedOnValueForMoneyResult> DreamTeamBasedOnValueForMoney([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> round)
		{
			return this.CreateMethodCallQuery<DreamTeamBasedOnValueForMoneyResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), round);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TopPlayerByPositionBasedOnPoints", IsComposable=true)]
		public IQueryable<TopPlayerByPositionBasedOnPointsResult> TopPlayerByPositionBasedOnPoints([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string position, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> round)
		{
			return this.CreateMethodCallQuery<TopPlayerByPositionBasedOnPointsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), position, round);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TopPlayerByPositionBasedOnValueForMoney", IsComposable=true)]
		public IQueryable<TopPlayerByPositionBasedOnValueForMoneyResult> TopPlayerByPositionBasedOnValueForMoney([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string position, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> round)
		{
			return this.CreateMethodCallQuery<TopPlayerByPositionBasedOnValueForMoneyResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), position, round);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AverageTopPlayerByPositionBasedOnPoints", IsComposable=true)]
		public IQueryable<AverageTopPlayerByPositionBasedOnPointsResult> AverageTopPlayerByPositionBasedOnPoints([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string position)
		{
			return this.CreateMethodCallQuery<AverageTopPlayerByPositionBasedOnPointsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), position);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AverageTopPlayerByPositionBasedOnValueForMoney", IsComposable=true)]
		public IQueryable<AverageTopPlayerByPositionBasedOnValueForMoneyResult> AverageTopPlayerByPositionBasedOnValueForMoney([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string position)
		{
			return this.CreateMethodCallQuery<AverageTopPlayerByPositionBasedOnValueForMoneyResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), position);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetOpposition", IsComposable=true)]
		public string GetOpposition([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> player, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> game)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), player, game).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Team", Storage="_Teams", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Round;
		
		private int _HomeTeamId;
		
		private int _AwayTeamId;
		
		private int _HomeScore;
		
		private int _AwayScore;
		
		private EntitySet<PlayerStat> _PlayerStats;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoundChanging(int value);
    partial void OnRoundChanged();
    partial void OnHomeTeamIdChanging(int value);
    partial void OnHomeTeamIdChanged();
    partial void OnAwayTeamIdChanging(int value);
    partial void OnAwayTeamIdChanged();
    partial void OnHomeScoreChanging(int value);
    partial void OnHomeScoreChanged();
    partial void OnAwayScoreChanging(int value);
    partial void OnAwayScoreChanged();
    #endregion
		
		public Game()
		{
			this._PlayerStats = new EntitySet<PlayerStat>(new Action<PlayerStat>(this.attach_PlayerStats), new Action<PlayerStat>(this.detach_PlayerStats));
			this._Team = default(EntityRef<Team>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamId", DbType="Int NOT NULL")]
		public int HomeTeamId
		{
			get
			{
				return this._HomeTeamId;
			}
			set
			{
				if ((this._HomeTeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamIdChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamId = value;
					this.SendPropertyChanged("HomeTeamId");
					this.OnHomeTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamId", DbType="Int NOT NULL")]
		public int AwayTeamId
		{
			get
			{
				return this._AwayTeamId;
			}
			set
			{
				if ((this._AwayTeamId != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamIdChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamId = value;
					this.SendPropertyChanged("AwayTeamId");
					this.OnAwayTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeScore", DbType="Int NOT NULL")]
		public int HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayScore", DbType="Int NOT NULL")]
		public int AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_PlayerStat", Storage="_PlayerStats", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<PlayerStat> PlayerStats
		{
			get
			{
				return this._PlayerStats;
			}
			set
			{
				this._PlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game", Storage="_Team", ThisKey="HomeTeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._HomeTeamId = value.Id;
					}
					else
					{
						this._HomeTeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game1", Storage="_Team1", ThisKey="AwayTeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Games1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Games1.Add(this);
						this._AwayTeamId = value.Id;
					}
					else
					{
						this._AwayTeamId = default(int);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerStats(PlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_PlayerStats(PlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _TeamId;
		
		private string _Position;
		
		private int _InitialValue;
		
		private EntitySet<PlayerStat> _PlayerStats;
		
		private EntityRef<Position> _Position1;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnInitialValueChanging(int value);
    partial void OnInitialValueChanged();
    #endregion
		
		public Player()
		{
			this._PlayerStats = new EntitySet<PlayerStat>(new Action<PlayerStat>(this.attach_PlayerStats), new Action<PlayerStat>(this.detach_PlayerStats));
			this._Position1 = default(EntityRef<Position>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					if (this._Position1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialValue", DbType="Int NOT NULL")]
		public int InitialValue
		{
			get
			{
				return this._InitialValue;
			}
			set
			{
				if ((this._InitialValue != value))
				{
					this.OnInitialValueChanging(value);
					this.SendPropertyChanging();
					this._InitialValue = value;
					this.SendPropertyChanged("InitialValue");
					this.OnInitialValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerStat", Storage="_PlayerStats", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<PlayerStat> PlayerStats
		{
			get
			{
				return this._PlayerStats;
			}
			set
			{
				this._PlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Player", Storage="_Position1", ThisKey="Position", OtherKey="ShortName", IsForeignKey=true)]
		public Position Position1
		{
			get
			{
				return this._Position1.Entity;
			}
			set
			{
				Position previousValue = this._Position1.Entity;
				if (((previousValue != value) 
							|| (this._Position1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position1.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Position1.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._Position = value.ShortName;
					}
					else
					{
						this._Position = default(string);
					}
					this.SendPropertyChanged("Position1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerStats(PlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerStats(PlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerStat")]
	public partial class PlayerStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private int _GameId;
		
		private int _Value;
		
		private int _MP;
		
		private int _TR;
		
		private int _TA;
		
		private int _LA;
		
		private int _TS;
		
		private int _CO;
		
		private int _CM;
		
		private int _PG;
		
		private int _DG;
		
		private int _DM;
		
		private int _CA;
		
		private int _RU;
		
		private int _RT;
		
		private int _TB;
		
		private int _EO;
		
		private int _IO;
		
		private int _CR;
		
		private int _LB;
		
		private int _LC;
		
		private int _ER;
		
		private int _TC;
		
		private int _TM;
		
		private int _LT;
		
		private int _LS;
		
		private int _LE;
		
		private int _TW;
		
		private int _TL;
		
		private int _SP;
		
		private int _PI;
		
		private int _TF;
		
		private int _PC;
		
		private int _Total;
		
		private int _MinutesPlayed;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnMPChanging(int value);
    partial void OnMPChanged();
    partial void OnTRChanging(int value);
    partial void OnTRChanged();
    partial void OnTAChanging(int value);
    partial void OnTAChanged();
    partial void OnLAChanging(int value);
    partial void OnLAChanged();
    partial void OnTSChanging(int value);
    partial void OnTSChanged();
    partial void OnCOChanging(int value);
    partial void OnCOChanged();
    partial void OnCMChanging(int value);
    partial void OnCMChanged();
    partial void OnPGChanging(int value);
    partial void OnPGChanged();
    partial void OnDGChanging(int value);
    partial void OnDGChanged();
    partial void OnDMChanging(int value);
    partial void OnDMChanged();
    partial void OnCAChanging(int value);
    partial void OnCAChanged();
    partial void OnRUChanging(int value);
    partial void OnRUChanged();
    partial void OnRTChanging(int value);
    partial void OnRTChanged();
    partial void OnTBChanging(int value);
    partial void OnTBChanged();
    partial void OnEOChanging(int value);
    partial void OnEOChanged();
    partial void OnIOChanging(int value);
    partial void OnIOChanged();
    partial void OnCRChanging(int value);
    partial void OnCRChanged();
    partial void OnLBChanging(int value);
    partial void OnLBChanged();
    partial void OnLCChanging(int value);
    partial void OnLCChanged();
    partial void OnERChanging(int value);
    partial void OnERChanged();
    partial void OnTCChanging(int value);
    partial void OnTCChanged();
    partial void OnTMChanging(int value);
    partial void OnTMChanged();
    partial void OnLTChanging(int value);
    partial void OnLTChanged();
    partial void OnLSChanging(int value);
    partial void OnLSChanged();
    partial void OnLEChanging(int value);
    partial void OnLEChanged();
    partial void OnTWChanging(int value);
    partial void OnTWChanged();
    partial void OnTLChanging(int value);
    partial void OnTLChanged();
    partial void OnSPChanging(int value);
    partial void OnSPChanged();
    partial void OnPIChanging(int value);
    partial void OnPIChanged();
    partial void OnTFChanging(int value);
    partial void OnTFChanged();
    partial void OnPCChanging(int value);
    partial void OnPCChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    partial void OnMinutesPlayedChanging(int value);
    partial void OnMinutesPlayedChanged();
    #endregion
		
		public PlayerStat()
		{
			this._Game = default(EntityRef<Game>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MP", DbType="Int NOT NULL")]
		public int MP
		{
			get
			{
				return this._MP;
			}
			set
			{
				if ((this._MP != value))
				{
					this.OnMPChanging(value);
					this.SendPropertyChanging();
					this._MP = value;
					this.SendPropertyChanged("MP");
					this.OnMPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TR", DbType="Int NOT NULL")]
		public int TR
		{
			get
			{
				return this._TR;
			}
			set
			{
				if ((this._TR != value))
				{
					this.OnTRChanging(value);
					this.SendPropertyChanging();
					this._TR = value;
					this.SendPropertyChanged("TR");
					this.OnTRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TA", DbType="Int NOT NULL")]
		public int TA
		{
			get
			{
				return this._TA;
			}
			set
			{
				if ((this._TA != value))
				{
					this.OnTAChanging(value);
					this.SendPropertyChanging();
					this._TA = value;
					this.SendPropertyChanged("TA");
					this.OnTAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LA", DbType="Int NOT NULL")]
		public int LA
		{
			get
			{
				return this._LA;
			}
			set
			{
				if ((this._LA != value))
				{
					this.OnLAChanging(value);
					this.SendPropertyChanging();
					this._LA = value;
					this.SendPropertyChanged("LA");
					this.OnLAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TS", DbType="Int NOT NULL")]
		public int TS
		{
			get
			{
				return this._TS;
			}
			set
			{
				if ((this._TS != value))
				{
					this.OnTSChanging(value);
					this.SendPropertyChanging();
					this._TS = value;
					this.SendPropertyChanged("TS");
					this.OnTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CO", DbType="Int NOT NULL")]
		public int CO
		{
			get
			{
				return this._CO;
			}
			set
			{
				if ((this._CO != value))
				{
					this.OnCOChanging(value);
					this.SendPropertyChanging();
					this._CO = value;
					this.SendPropertyChanged("CO");
					this.OnCOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CM", DbType="Int NOT NULL")]
		public int CM
		{
			get
			{
				return this._CM;
			}
			set
			{
				if ((this._CM != value))
				{
					this.OnCMChanging(value);
					this.SendPropertyChanging();
					this._CM = value;
					this.SendPropertyChanged("CM");
					this.OnCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PG", DbType="Int NOT NULL")]
		public int PG
		{
			get
			{
				return this._PG;
			}
			set
			{
				if ((this._PG != value))
				{
					this.OnPGChanging(value);
					this.SendPropertyChanging();
					this._PG = value;
					this.SendPropertyChanged("PG");
					this.OnPGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DG", DbType="Int NOT NULL")]
		public int DG
		{
			get
			{
				return this._DG;
			}
			set
			{
				if ((this._DG != value))
				{
					this.OnDGChanging(value);
					this.SendPropertyChanging();
					this._DG = value;
					this.SendPropertyChanged("DG");
					this.OnDGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DM", DbType="Int NOT NULL")]
		public int DM
		{
			get
			{
				return this._DM;
			}
			set
			{
				if ((this._DM != value))
				{
					this.OnDMChanging(value);
					this.SendPropertyChanging();
					this._DM = value;
					this.SendPropertyChanged("DM");
					this.OnDMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CA", DbType="Int NOT NULL")]
		public int CA
		{
			get
			{
				return this._CA;
			}
			set
			{
				if ((this._CA != value))
				{
					this.OnCAChanging(value);
					this.SendPropertyChanging();
					this._CA = value;
					this.SendPropertyChanged("CA");
					this.OnCAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RU", DbType="Int NOT NULL")]
		public int RU
		{
			get
			{
				return this._RU;
			}
			set
			{
				if ((this._RU != value))
				{
					this.OnRUChanging(value);
					this.SendPropertyChanging();
					this._RU = value;
					this.SendPropertyChanged("RU");
					this.OnRUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RT", DbType="Int NOT NULL")]
		public int RT
		{
			get
			{
				return this._RT;
			}
			set
			{
				if ((this._RT != value))
				{
					this.OnRTChanging(value);
					this.SendPropertyChanging();
					this._RT = value;
					this.SendPropertyChanged("RT");
					this.OnRTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TB", DbType="Int NOT NULL")]
		public int TB
		{
			get
			{
				return this._TB;
			}
			set
			{
				if ((this._TB != value))
				{
					this.OnTBChanging(value);
					this.SendPropertyChanging();
					this._TB = value;
					this.SendPropertyChanged("TB");
					this.OnTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EO", DbType="Int NOT NULL")]
		public int EO
		{
			get
			{
				return this._EO;
			}
			set
			{
				if ((this._EO != value))
				{
					this.OnEOChanging(value);
					this.SendPropertyChanging();
					this._EO = value;
					this.SendPropertyChanged("EO");
					this.OnEOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IO", DbType="Int NOT NULL")]
		public int IO
		{
			get
			{
				return this._IO;
			}
			set
			{
				if ((this._IO != value))
				{
					this.OnIOChanging(value);
					this.SendPropertyChanging();
					this._IO = value;
					this.SendPropertyChanged("IO");
					this.OnIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CR", DbType="Int NOT NULL")]
		public int CR
		{
			get
			{
				return this._CR;
			}
			set
			{
				if ((this._CR != value))
				{
					this.OnCRChanging(value);
					this.SendPropertyChanging();
					this._CR = value;
					this.SendPropertyChanged("CR");
					this.OnCRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LB", DbType="Int NOT NULL")]
		public int LB
		{
			get
			{
				return this._LB;
			}
			set
			{
				if ((this._LB != value))
				{
					this.OnLBChanging(value);
					this.SendPropertyChanging();
					this._LB = value;
					this.SendPropertyChanged("LB");
					this.OnLBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LC", DbType="Int NOT NULL")]
		public int LC
		{
			get
			{
				return this._LC;
			}
			set
			{
				if ((this._LC != value))
				{
					this.OnLCChanging(value);
					this.SendPropertyChanging();
					this._LC = value;
					this.SendPropertyChanged("LC");
					this.OnLCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ER", DbType="Int NOT NULL")]
		public int ER
		{
			get
			{
				return this._ER;
			}
			set
			{
				if ((this._ER != value))
				{
					this.OnERChanging(value);
					this.SendPropertyChanging();
					this._ER = value;
					this.SendPropertyChanged("ER");
					this.OnERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TC", DbType="Int NOT NULL")]
		public int TC
		{
			get
			{
				return this._TC;
			}
			set
			{
				if ((this._TC != value))
				{
					this.OnTCChanging(value);
					this.SendPropertyChanging();
					this._TC = value;
					this.SendPropertyChanged("TC");
					this.OnTCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TM", DbType="Int NOT NULL")]
		public int TM
		{
			get
			{
				return this._TM;
			}
			set
			{
				if ((this._TM != value))
				{
					this.OnTMChanging(value);
					this.SendPropertyChanging();
					this._TM = value;
					this.SendPropertyChanged("TM");
					this.OnTMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LT", DbType="Int NOT NULL")]
		public int LT
		{
			get
			{
				return this._LT;
			}
			set
			{
				if ((this._LT != value))
				{
					this.OnLTChanging(value);
					this.SendPropertyChanging();
					this._LT = value;
					this.SendPropertyChanged("LT");
					this.OnLTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LS", DbType="Int NOT NULL")]
		public int LS
		{
			get
			{
				return this._LS;
			}
			set
			{
				if ((this._LS != value))
				{
					this.OnLSChanging(value);
					this.SendPropertyChanging();
					this._LS = value;
					this.SendPropertyChanged("LS");
					this.OnLSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LE", DbType="Int NOT NULL")]
		public int LE
		{
			get
			{
				return this._LE;
			}
			set
			{
				if ((this._LE != value))
				{
					this.OnLEChanging(value);
					this.SendPropertyChanging();
					this._LE = value;
					this.SendPropertyChanged("LE");
					this.OnLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TW", DbType="Int NOT NULL")]
		public int TW
		{
			get
			{
				return this._TW;
			}
			set
			{
				if ((this._TW != value))
				{
					this.OnTWChanging(value);
					this.SendPropertyChanging();
					this._TW = value;
					this.SendPropertyChanged("TW");
					this.OnTWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TL", DbType="Int NOT NULL")]
		public int TL
		{
			get
			{
				return this._TL;
			}
			set
			{
				if ((this._TL != value))
				{
					this.OnTLChanging(value);
					this.SendPropertyChanging();
					this._TL = value;
					this.SendPropertyChanged("TL");
					this.OnTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SP", DbType="Int NOT NULL")]
		public int SP
		{
			get
			{
				return this._SP;
			}
			set
			{
				if ((this._SP != value))
				{
					this.OnSPChanging(value);
					this.SendPropertyChanging();
					this._SP = value;
					this.SendPropertyChanged("SP");
					this.OnSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PI", DbType="Int NOT NULL")]
		public int PI
		{
			get
			{
				return this._PI;
			}
			set
			{
				if ((this._PI != value))
				{
					this.OnPIChanging(value);
					this.SendPropertyChanging();
					this._PI = value;
					this.SendPropertyChanged("PI");
					this.OnPIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TF", DbType="Int NOT NULL")]
		public int TF
		{
			get
			{
				return this._TF;
			}
			set
			{
				if ((this._TF != value))
				{
					this.OnTFChanging(value);
					this.SendPropertyChanging();
					this._TF = value;
					this.SendPropertyChanged("TF");
					this.OnTFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PC", DbType="Int NOT NULL")]
		public int PC
		{
			get
			{
				return this._PC;
			}
			set
			{
				if ((this._PC != value))
				{
					this.OnPCChanging(value);
					this.SendPropertyChanging();
					this._PC = value;
					this.SendPropertyChanged("PC");
					this.OnPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinutesPlayed", DbType="Int NOT NULL")]
		public int MinutesPlayed
		{
			get
			{
				return this._MinutesPlayed;
			}
			set
			{
				if ((this._MinutesPlayed != value))
				{
					this.OnMinutesPlayedChanging(value);
					this.SendPropertyChanging();
					this._MinutesPlayed = value;
					this.SendPropertyChanged("MinutesPlayed");
					this.OnMinutesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_PlayerStat", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.PlayerStats.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.PlayerStats.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerStat", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerStats.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerStats.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Position()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="Char(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Player", Storage="_Players", ThisKey="ShortName", OtherKey="Position")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Position1 = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Position1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CountryId;
		
		private string _ShortName;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Game> _Games1;
		
		private EntitySet<Player> _Players;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Team()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game", Storage="_Games", ThisKey="Id", OtherKey="HomeTeamId")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game1", Storage="_Games1", ThisKey="Id", OtherKey="AwayTeamId")]
		public EntitySet<Game> Games1
		{
			get
			{
				return this._Games1;
			}
			set
			{
				this._Games1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Team", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AveragePlayerStats")]
	public partial class AveragePlayerStats
	{
		
		private int _PlayerId;
		
		private System.Nullable<int> _RoundsPlayed;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private System.Nullable<int> _Points;
		
		private System.Nullable<int> _Value;
		
		public AveragePlayerStats()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this._PlayerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundsPlayed", DbType="Int")]
		public System.Nullable<int> RoundsPlayed
		{
			get
			{
				return this._RoundsPlayed;
			}
			set
			{
				if ((this._RoundsPlayed != value))
				{
					this._RoundsPlayed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255)")]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this._Points = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DreamSquadOnPoints")]
	public partial class DreamSquadOnPoints
	{
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private System.Nullable<int> _Average;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		public DreamSquadOnPoints()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255)")]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Int")]
		public System.Nullable<int> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this._Average = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DreamSquadOnValueForMoney")]
	public partial class DreamSquadOnValueForMoney
	{
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private System.Nullable<int> _Average;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		public DreamSquadOnValueForMoney()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255)")]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Int")]
		public System.Nullable<int> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this._Average = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DreamTeamOnPoints")]
	public partial class DreamTeamOnPoints
	{
		
		private int _Round;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private string _Against;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		public DreamTeamOnPoints()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this._Against = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DreamTeamOnValueForMoney")]
	public partial class DreamTeamOnValueForMoney
	{
		
		private int _Round;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private string _Against;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		public DreamTeamOnValueForMoney()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this._Against = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerStats")]
	public partial class PlayerStats
	{
		
		private int _GameId;
		
		private int _Round;
		
		private string _Team;
		
		private int _PlayerId;
		
		private string _Player;
		
		private string _Position;
		
		private string _Against;
		
		private int _MinutesPlayed;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		public PlayerStats()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this._PlayerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="VarChar(50)")]
		public string Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this._Against = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinutesPlayed", DbType="Int NOT NULL")]
		public int MinutesPlayed
		{
			get
			{
				return this._MinutesPlayed;
			}
			set
			{
				if ((this._MinutesPlayed != value))
				{
					this._MinutesPlayed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
	}
	
	public partial class DreamTeamBasedOnPointsResult
	{
		
		private int _Round;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		public DreamTeamBasedOnPointsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
	}
	
	public partial class DreamTeamBasedOnValueForMoneyResult
	{
		
		private int _Round;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private string _Against;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		private int _PositionId;
		
		public DreamTeamBasedOnValueForMoneyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this._Against = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int NOT NULL")]
		public int PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this._PositionId = value;
				}
			}
		}
	}
	
	public partial class TopPlayerByPositionBasedOnPointsResult
	{
		
		private int _GameId;
		
		private int _Round;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private string _Against;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		private int _PositionId;
		
		public TopPlayerByPositionBasedOnPointsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="VarChar(50)")]
		public string Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this._Against = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int NOT NULL")]
		public int PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this._PositionId = value;
				}
			}
		}
	}
	
	public partial class TopPlayerByPositionBasedOnValueForMoneyResult
	{
		
		private int _GameId;
		
		private int _Round;
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private string _Against;
		
		private int _Total;
		
		private int _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		private int _PositionId;
		
		public TopPlayerByPositionBasedOnValueForMoneyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this._Round = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="VarChar(50)")]
		public string Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this._Against = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int NOT NULL")]
		public int PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this._PositionId = value;
				}
			}
		}
	}
	
	public partial class AverageTopPlayerByPositionBasedOnPointsResult
	{
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private System.Nullable<int> _Average;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		private System.Nullable<int> _PositionId;
		
		public AverageTopPlayerByPositionBasedOnPointsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255)")]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Int")]
		public System.Nullable<int> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this._Average = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int")]
		public System.Nullable<int> PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this._PositionId = value;
				}
			}
		}
	}
	
	public partial class AverageTopPlayerByPositionBasedOnValueForMoneyResult
	{
		
		private string _Team;
		
		private string _Player;
		
		private string _Position;
		
		private System.Nullable<int> _Average;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Value;
		
		private System.Nullable<double> _ValueForMoney;
		
		private System.Nullable<int> _PositionId;
		
		public AverageTopPlayerByPositionBasedOnValueForMoneyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="VarChar(255)")]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Char(3)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Int")]
		public System.Nullable<int> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this._Average = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueForMoney", DbType="Float")]
		public System.Nullable<double> ValueForMoney
		{
			get
			{
				return this._ValueForMoney;
			}
			set
			{
				if ((this._ValueForMoney != value))
				{
					this._ValueForMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int")]
		public System.Nullable<int> PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this._PositionId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
